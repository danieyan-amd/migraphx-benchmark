name: MIGraphX ONNX Model Tests (no Docker)

on:
  workflow_call:
    inputs:
      rocm_release:
        description: ROCm Version (parity only)
        type: string
        required: true
      onnx_reports_repo:
        description: Repo where ONNX reports are stored (optional downstream)
        type: string
        required: true
      benchmark_utils_repo:
        description: Repo for utils (parity only)
        type: string
        required: true
      organization:
        description: Organization (used for paths if needed)
        type: string
        required: true
      result_number:
        description: Last N results (parity only)
        type: string
        required: true
      model_timeout:
        description: Per-model timeout (parity only)
        type: string
        required: true
    secrets:
      gh_token:
        description: GitHub token (optional; only if you need to checkout other repos)
        required: false

permissions:
  contents: read

env:
  # Datasets and ROCm libs expected on the self-hosted runner
  DATASETS_DIR: /usr/share/migraphx/migraph_datasets
  PYTHONPATH: /opt/rocm/lib
  LD_LIBRARY_PATH: /opt/rocm/lib
  LOG_ROOT: logs

jobs:
  model-zoo-tests:
    runs-on: [self-hosted, Linux, X64]
    timeout-minutes: 90

    steps:
      - name: Checkout sources
        uses: actions/checkout@v4
        with:
          clean: false  # avoid failing if prior files are not deletable

      - name: Init timestamp
        id: ts
        run: echo "stamp=$(date -u +%Y%m%dT%H%M%SZ)" >> "$GITHUB_OUTPUT"

      - name: Choose results directory
        id: results
        shell: bash
        run: |
          set -euo pipefail
          RUN_TS="${{ steps.ts.outputs.stamp }}"
          RES_DIR="${RUNNER_TEMP}/onnx-${RUN_TS}"
          mkdir -p "$RES_DIR/fp16" "$RES_DIR/fp32"
          echo "run_ts=$RUN_TS" >> "$GITHUB_OUTPUT"
          echo "host_results=$RES_DIR" >> "$GITHUB_OUTPUT"
          echo "Using $RES_DIR for artifacts"

      - name: List datasets on host (debug)
        shell: bash
        run: |
          set -e
          for d in \
            /usr/share/migraphx/migraph_datasets \
            /usr/share/migraphx/saved-models \
            /usr/share/migraphx/new-saved-models
          do
            echo "==> Host path: $d"
            if [ -d "$d" ]; then
              if find "$d" -type f \( -name '*.onnx' -o -name '*.pb' \) -print -quit | grep -q . ; then
                echo "    contains model files"
              else
                echo "    (no .onnx/.pb files found)"
              fi
            else
              echo "    (missing)"
            fi
          done

      - name: Run Model Zoo tests on host (no Docker)
        shell: bash
        env:
          RUN_TS: ${{ steps.results.outputs.run_ts }}
        run: |
          set -euo pipefail

          # Normalize line endings (no-op on Linux)
          sed -i 's/\r$//' tools/model_zoo/test_generator/test_models.sh || true

          if [ ! -d "${DATASETS_DIR}" ]; then
            echo "Datasets dir not found on host: ${DATASETS_DIR}"
            exit 1
          fi

          # Bail fast if no models present
          if ! find "${DATASETS_DIR}" -type f \( -name '*.onnx' -o -name '*.pb' \) -print -quit | grep -q . ; then
            echo "No .onnx/.pb files under ${DATASETS_DIR}. Skipping run."
            mkdir -p "${{ steps.results.outputs.host_results }}"
            printf '## Totals\n- PASS: 0\n- FAIL: 0\n' > "${{ steps.results.outputs.host_results }}/summary.md"
            printf '{"totals":{"pass":0,"fail":0},"regressions":{"fp32":{"passed":[],"failed":[]},"fp16":{"passed":[],"failed":[]}}}\n' > "${{ steps.results.outputs.host_results }}/summary.json"
            exit 0
          fi

          chmod +x tools/model_zoo/test_generator/test_models.sh || true

          echo "Checking dataset candidates on host..."
          for d in /usr/share/migraphx/migraph_datasets "${DATASETS_DIR}"; do
            if [ -d "$d" ]; then
              if find "$d" -type f \( -name "*.onnx" -o -name "*.pb" \) -print -quit | grep -q . ; then
                printf "  %s: present (has model files)\n" "$d"
              else
                printf "  %s: present (no model files)\n" "$d"
              fi
            else
              printf "  %s: missing\n" "$d"
            fi
          done

          DATASET_ROOT="${DATASETS_DIR}"

          echo "Running model-zoo tests from ${DATASET_ROOT}..."
          bash tools/model_zoo/test_generator/test_models.sh "${DATASET_ROOT}" 2>&1 | tee "${{ steps.results.outputs.host_results }}/raw.log"

          # Copy per-precision logs to results dir if present
          shopt -s nullglob
          mkdir -p "${{ steps.results.outputs.host_results }}/fp16" "${{ steps.results.outputs.host_results }}/fp32"
          for p in fp16 fp32; do
            src="tools/model_zoo/test_generator/logs/$p"
            if [ -d "$src" ]; then
              files=( "$src"/*.log )
              if [ -e "${files[0]}" ]; then
                cp -f "${files[@]}" "${{ steps.results.outputs.host_results }}/$p/"
              fi
            fi
          done

          # Keep repo clean for next runs
          rm -rf tools/model_zoo/test_generator/logs/* || true

      - name: Summarize results
        shell: bash
        env:
          RESULTS_DIR: ${{ steps.results.outputs.host_results }}
        run: |
          set -euo pipefail
          python3 scripts/summarize_onnx_logs.py \
            --results "${RESULTS_DIR}" \
            --out-json "${RESULTS_DIR}/summary.json" \
            --out-md   "${RESULTS_DIR}/summary.md"

      - name: Upload logs and summary (timestamped)
        uses: actions/upload-artifact@v4
        with:
          name: model-zoo-logs-${{ steps.results.outputs.run_ts }}
          path: ${{ steps.results.outputs.host_results }}
          if-no-files-found: error
